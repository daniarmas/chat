# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type Subscription {
  """
  `currentTime` will return a stream of `Time` objects.
  """
  currentTime: Time!
}

type Mutation {
  signIn(input: SignInInput!): SignInResponse!
  signOut: SignOutResponse!
  sendMessage(input: SendMessageInput!): SendMessageResponse!
  getOrCreateChat(input: GetOrCreateChatInput!): GetOrCreateChatResponse!
}

type Query {
  me: MeResponse!
  fetchMessages(input: FetchAllMessagesInput!): FetchMessagesResponse!
}

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type Message {
  id: ID!
  content: String!
  senderId: String!
  receiverId: String!
  createTime: Time!
}

type Chat {
  id: ID!
  channel: String!
  firstUserId: String!
  secondUserId: String!
  createTime: Time!
}

type User {
  id: ID!
  email: String!
  password: String
  fullname: String!
  username: String!
  createTime: Time!
}

input GetOrCreateChatInput {
  firstUserId: String!
  SecondUserId: String!
}

input SignInInput {
  email: String!
  password: String!
  logout: Boolean!
}

input SendMessageInput {
  content: String!
  receiverId: String!
}

input FetchAllMessagesInput {
  chatUserId: String!
  createTimeCursor: Time
}

interface Data {
  status: Int!
}

interface Response {
  status: Int!
  message: String!
  error: Error
  data: Data
}

type Error {
	code: String!
	message: String!
	details: [ErrorDetails]
}

type ErrorDetails {
  field: String!
  message: String!
}

type SignInResponse implements Response {
  status: Int!
  message: String!
  error: Error
  data: SignInData
}

type SignOutResponse implements Response {
  status: Int!
  message: String!
  error: Error
  data: SignOutData
}

type MeResponse implements Response {
  status: Int!
  message: String!
  error: Error
  data: MeData
}

type MeData implements Data {
  status: Int!
  user: User!
}

type SignInData implements Data {
  status: Int!
  user: User!
  accessToken: String!
  refreshToken: String!
}

type SignOutData implements Data {
  status: Int!
}

type SendMessageData implements Data {
  status: Int!
  message: Message!
}

type FetchAllMessagesData implements Data {
  status: Int!
  createTimeCursor: Time!
  messages: [Message!]
}

type GetOrCreateChatData implements Data {
  status: Int!
  createTimeCursor: Time!
  chat: Chat!
}

type SendMessageResponse implements Response {
  status: Int!
  message: String!
  error: Error
  data: SendMessageData
}

type FetchMessagesResponse implements Response {
  status: Int!
  message: String!
  error: Error
  data: FetchAllMessagesData
}

type GetOrCreateChatResponse implements Response {
  status: Int!
  message: String!
  error: Error
  data: GetOrCreateChatData
}